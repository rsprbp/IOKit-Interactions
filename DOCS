#  IOKit-Interactions Documentation (still wip)

This paper is a brief explanation of an IOKit interaction script for macOS. The script's functionality for managing kernel data objects includes logging, payload encryption/decryption, payload compression/decompression, and secure memory handling. Furthermore, its major goal is to give an interactive menu for user input.

Remember to ensure that the required libraries (zlib and IOKit) are appropriately linked.


#  logMessage(const char *message)
Logs a message with a timestamp to "iokit-interactions.log".
- Parameters:
message: The message to log.
Example: logMessage("Starting service...");

#  logPayloadHistory(const char *payload)
Logs a payload with a timestamp to "payload_history.log".
- Parameters:
payload: The payload data to log.
Example: logPayloadHistory("Payload data");

#  encryptDecryptPayload(char *payload)
Encrypts or decrypts a payload using XOR with a predefined key.
- Parameters:
payload: The payload to encrypt or decrypt.
Example: encryptDecryptPayload(payloadData);

#  compressPayload(char *payload, char **compressedPayload, size_t *compressedSize)
Compresses a payload using zlib.
- Parameters:
payload: The payload to compress.
compressedPayload: Pointer to store the compressed payload.
compressedSize: Pointer to store the size of the compressed payload.
Example: compressPayload(payloadData, &compressedData, &compressedSize);

#  decompressPayload(char *compressedPayload, size_t compressedSize, char **decompressedPayload)
Decompresses a payload using zlib.
- Parameters:
compressedPayload: The compressed payload to decompress.
compressedSize: The size of the compressed payload.
decompressedPayload: Pointer to store the decompressed payload.
Example: decompressPayload(compressedData, compressedSize, &decompressedData);

#  secureFree(void *ptr, size_t size)
Securely frees memory by zeroing it out before freeing.
- Parameters:
ptr: Pointer to the memory to free.
size: Size of the memory to zero out.
Example: secureFree(dataPtr, dataSize);

#  signalHandler(int signum)
Handles signals and exits the program.
- Parameters:
signum: Signal number received.
Example: This function is used internally for signal handling.

#  manipulateKernelDataWithPayload(struct kernel_data_object *obj, const char *payload)
Manipulates a kernel data object with the provided payload.
- Parameters:
obj: Pointer to the kernel data object.
payload: Payload to manipulate the object with.
Example: manipulateKernelDataWithPayload(&kernelObj, payloadData);

#  io_service_t getService()
Gets the IOKit service by matching the service name.
Returns: The service object.
Example: io_service_t service = getService();

#  io_connect_t openConnection(io_service_t service)
Opens a connection to the IOKit service.
- Parameters:
service: The IOKit service object.
Returns: The connection object.
Example: io_connect_t connect = openConnection(service);

#  sendPayloadToKernel(io_connect_t connect, struct kernel_data_object *obj)
Sends a payload to the kernel via the IOKit connection.
- Parameters:
connect: The IOKit connection object.
obj: The kernel data object containing the payload.
Example: sendPayloadToKernel(connect, &kernelObj);

